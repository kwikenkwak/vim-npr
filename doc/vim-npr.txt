*vim-npr.txt* Plugin for resolving Node Path Relative modules in JS

Author: Tom Arrell <https://github.com/tomarrell>
License: GNU GPL v3.0

INTRODUCTION                                    *vim-npr*

This plugin will attempt to resolve Javascript modules, relative
to an array of paths defined by the resolve key in a package's
package.json. It defines extra functionality on the standard
*gf* file resolution.

By default the plugin will attempt to find a package.json file
within 5 parent directories relative to the current file when
*gf* was run.

It support ES, AMD and CommonJS module import types.

CONFIGURATION                                   *vim-npr-configuration*

Resolve directories are defined on a project-by-project basis,
allowing you to specify custom resolution directories uniquely.
This is done in the projects package.json file. Define a single
'resolve' key whos value is an array of strings containing the
directories you would like resolution to occur in. An example
of such array is below.

  {
    ...
    "resolve": ["src", "test"],
    ...
  }

If the resolve key does not exist in the package, vim-npr will
attempt to resolve it in common directories. These are,
"src", "lib", "test", "public" and "node_modules" by default.

Please note, that defining any resolve key will override the
defaults.

Max Levels                                      g:vim_npr_max_levels

The maximum number of levels that the plugin will traverse
upwards in an attempt to resolve the package.json file within
the project. This can be overridden if your project requires
larger traversal.

File Names                                      g:vim_npr_file_names

A list of strings that will be appended to the file path for
each resolution directory check. These will determine which
file ultimately gets resolved, this can also help modify the
path to add default file check names, e.g. index.js.

File Types                                      g:vim_npr_file_types

A list of file extensions that the plugin will allow itself to
execute on. This however won't ensure that the includeexpr
variable has be set in the current buffer.

Default Dirs                                    g:vim_npr_default_dirs

A list of default directories that the plugin will attempt
resolution within if it cannot find a resolve key in the
package.json file within the project. If a package.json file
is not found at all however, the plugin will throw an error
as it cannot be certain which directory is the top level for
the project it is currently within.

MAPPINGS                                        *vim-npr-mappings*

The plugin works by extending the original functionality of *gf*.
You can therefore use it as an extension of your existing workflow.
An example of usage where * denotes the cursor position:

  Text                                         Command
  import React from 're*act'                   gf
  import { Link } from '*react-router'         gf
  const fetch = require('fet*ch')              gf
  const Koa = require('koa*')                  gf

